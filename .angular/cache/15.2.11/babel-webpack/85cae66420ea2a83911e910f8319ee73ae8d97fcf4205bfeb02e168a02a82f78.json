{"ast":null,"code":"import { environment } from \"src/environments/environment\";\nimport { TodoItem } from \"./todo-item/todo-item\";\nimport { catchError, map } from 'rxjs/operators';\nimport { formatDate } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../shared/http-error-handler.service\";\nexport let TodoService = /*#__PURE__*/(() => {\n  class TodoService {\n    constructor(http, httpErrorHandler) {\n      this.http = http;\n      this.todoBaseUrl = `${environment.apiUrl}/tasks`; // URL to todo api   \n      this.handleError = httpErrorHandler.createHandleError('TodoService');\n    }\n    getTodoList() {\n      return this.http.get(this.todoBaseUrl).pipe(map(todos => {\n        let todoList = todos.map(this._transform); // map to UI format for todos (case data has inconsistency for 'done' property)\n        return todoList;\n      }), catchError(this.handleError('getTodoList', [])));\n    }\n    addTodoItem(todoItem) {\n      return this.http.post(`${this.todoBaseUrl}`, {\n        id: todoItem.id,\n        label: todoItem.label,\n        description: todoItem.description,\n        category: todoItem.category,\n        done: this._getDonePropertyResult(todoItem)\n      }).pipe(catchError(this.handleError('addTodoItem', [])), map(this._transform));\n    }\n    editTodoItem(todoItem) {\n      return this.http.patch(`${this.todoBaseUrl}/${todoItem.id}`, {\n        id: todoItem.id,\n        label: todoItem.label,\n        description: todoItem.description,\n        category: todoItem.category,\n        done: this._getDonePropertyResult(todoItem)\n      }).pipe(catchError(this.handleError('editTodoItem', [])), map(this._transform));\n    }\n    deleteTodoItem(todoId) {\n      return this.http.delete(`${this.todoBaseUrl}/${todoId}`).pipe(catchError(this.handleError('deleteTodoItem', [])));\n    }\n    _transform(dbTodoItem) {\n      let isCompleted = !/false/i.test(dbTodoItem.done); // filter out done: false and done:'dd-mm-yyyy' case\n      let parts = dbTodoItem.done.toString().split('-');\n      let completedDate = isCompleted ? new Date(parts[2], parts[1] - 1, parts[0]) // formatting with our specified version\n      : null;\n      return new TodoItem(dbTodoItem.id, dbTodoItem.label, dbTodoItem.description, dbTodoItem.category, isCompleted, completedDate);\n    }\n    _getDonePropertyResult(todoItem) {\n      let done;\n      if (todoItem.isCompleted) {\n        done = formatDate(todoItem.completedOn, 'dd-MM-yyy', 'en-US'); // set date format to our version // TODO: use current culture for date formating\n      } else {\n        done = false;\n      }\n      return done;\n    }\n    static #_ = this.ɵfac = function TodoService_Factory(t) {\n      return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TodoService,\n      factory: TodoService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return TodoService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}