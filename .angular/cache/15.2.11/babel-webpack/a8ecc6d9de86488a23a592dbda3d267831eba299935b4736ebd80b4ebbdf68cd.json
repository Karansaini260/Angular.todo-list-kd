{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport { debounceTime, takeUntil } from 'rxjs/operators';\nimport { TodoItem } from './todo-item/todo-item';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./todo.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./todo-item/todo-item.component\";\nimport * as i5 from \"../shared/add-edit-modal/add-edit-todo/add-edit-todo.component\";\nfunction TodoListComponent_a_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"a\", 14);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_a_14_Template_a_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const filterType_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.chooseFilterType(filterType_r2.name));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const filterType_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"hidden\", filterType_r2.isHidden);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", filterType_r2.name, \" \");\n  }\n}\nfunction TodoListComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"app-todo-item\", 15);\n    i0.ɵɵlistener(\"editTodoItem\", function TodoListComponent_ng_container_15_Template_app_todo_item_editTodoItem_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.editTodoItem($event));\n    })(\"deleteTodoItem\", function TodoListComponent_ng_container_15_Template_app_todo_item_deleteTodoItem_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.deleteTodoItem($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const todoItem_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"todoItem\", todoItem_r5)(\"todoCategories\", ctx_r1.todoCategories);\n  }\n}\nexport let TodoListComponent = /*#__PURE__*/(() => {\n  class TodoListComponent {\n    get todos() {\n      return this._todoList;\n    }\n    constructor(todoService) {\n      this.todoService = todoService;\n      this.newTodo = new TodoItem(0, '', '', null, false); // just an empty todo for add modal\n      this.filterTypes = [{\n        name: 'By Default',\n        isHidden: true\n      }, {\n        name: 'Label'\n      }, {\n        name: 'Description'\n      }, {\n        name: 'Category'\n      }];\n      this.openAddEditModal = new Subject(); // the caller for add/edit modal\n      this.onAddEditComplete = new Subject(); // the ajax complete result callback\n      this._todoList = []; // all todo items\n      this._filterSubject = new BehaviorSubject('');\n      this._filterDelayTime = 500; // user typing delay before call the filtering  \n      this._filterBSDestroyed$ = new Subject();\n      this._getTodoListDestroyed$ = new Subject();\n      this._deleteTodoItemDestroyed$ = new Subject();\n      this._addTodoItemDestroyed$ = new Subject();\n      this._editTodoItemDestroyed$ = new Subject();\n    }\n    ngOnInit() {\n      this.selectedFilterType = this.filterTypes[0].name; // set 'By Default' aka label filtering\n      this.getTodoList(); // peform todos DB reading\n      this._filterSubject.pipe(debounceTime(this._filterDelayTime), takeUntil(this._filterBSDestroyed$)).subscribe(searchTextValue => {\n        this._handleSearch(searchTextValue);\n      });\n    }\n    ngOnDestroy() {\n      this._filterBSDestroyed$.complete();\n      this._getTodoListDestroyed$.complete();\n      this._addTodoItemDestroyed$.complete();\n      this._editTodoItemDestroyed$.complete();\n      this._deleteTodoItemDestroyed$.complete();\n    }\n    getTodoList() {\n      this.todoService.getTodoList().pipe(takeUntil(this._getTodoListDestroyed$)).subscribe(todos => {\n        this._todoList = todos;\n        this.todoCategories = [...new Set(this._todoList.map(t => t.category))]; // making the taken categories unique\n      });\n    }\n\n    isCategorySelected(todoCategory) {\n      return todoCategory && todoCategory === this.newTodo.category;\n    }\n    chooseFilterType(name) {\n      this.filterTypes.forEach(ft => {\n        ft.isHidden = ft.name === name; // hiding the selected filter type from the dropdown\n      });\n\n      this.selectedFilterType = name;\n      this._handleSearch(this._filterSubject.value); // trigger search to perform\n    }\n\n    filterTodo($event) {\n      let searchValue = $event.target.value.toLocaleLowerCase(); // make search case-insensitive\n      this._filterSubject.next(searchValue);\n    }\n    resetFilter() {\n      this.filterValue = '';\n      this.filterTodo({\n        target: {\n          value: this.filterValue\n        }\n      }); // call default filter behavior\n    }\n\n    openAddModal() {\n      this.newTodo.label = this.newTodo.description = ''; // reset the add modal data from the last opening values\n      this.newTodo.category = null;\n      this.openAddEditModal.next(this.newTodo);\n    }\n    deleteTodoItem(todoId) {\n      this.todoService.deleteTodoItem(todoId).pipe(takeUntil(this._deleteTodoItemDestroyed$)).subscribe(() => {\n        const index = this._todoList.findIndex(t => t.id === todoId);\n        if (index !== -1) {\n          this._todoList.splice(index, 1); // hard remove the todo item\n        }\n      });\n    }\n\n    addTodoItem(todoItem) {\n      const todoNewId = Math.max(...this._todoList.map(o => o.id)) + 1; // make sure not have duplicated index for new item\n      todoItem.id = todoNewId;\n      this.todoService.addTodoItem(todoItem).pipe(takeUntil(this._addTodoItemDestroyed$)).subscribe(() => {\n        this._todoList.push(new TodoItem(todoNewId, todoItem.label, todoItem.description, todoItem.category, todoItem.isCompleted, todoItem.completedOn));\n      });\n    }\n    editTodoItem(todoItem) {\n      this.todoService.editTodoItem(todoItem).pipe(takeUntil(this._editTodoItemDestroyed$)).subscribe(() => {\n        let updatedTodoItem = this._todoList.find(t => t.id === todoItem.id); // find the updated todo item\n        if (updatedTodoItem) {\n          updatedTodoItem.category = todoItem.category;\n          updatedTodoItem.description = todoItem.description;\n          updatedTodoItem.label = todoItem.label;\n          updatedTodoItem.isCompleted = todoItem.isCompleted;\n          updatedTodoItem.completedOn = todoItem.completedOn;\n        }\n      });\n    }\n    _handleSearch(searchValue) {\n      let searchType = this.selectedFilterType != this.filterTypes[0].name ? this.selectedFilterType // get the selected fitler type\n      : this.filterTypes[1].name; // or default\n      searchType = searchType.toLocaleLowerCase();\n      this._todoList.forEach(l => {\n        l.isHidden = l[searchType].toLocaleLowerCase().indexOf(searchValue) === -1; // search on todo property based on filter type\n      });\n    }\n    static #_ = this.ɵfac = function TodoListComponent_Factory(t) {\n      return new (t || TodoListComponent)(i0.ɵɵdirectiveInject(i1.TodoService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TodoListComponent,\n      selectors: [[\"app-todo-list\"]],\n      decls: 23,\n      vars: 6,\n      consts: [[1, \"container\"], [1, \"d-flex\", \"justify-content-between\", \"mb-3\"], [1, \"p-2\"], [1, \"input-group\", \"mb-3\"], [1, \"position-relative\"], [\"type\", \"text\", \"placeholder\", \"Filter todo\", \"aria-label\", \"Todo label\", \"aria-describedby\", \"button-addon2\", 1, \"form-control\", \"p-2\", 3, \"ngModel\", \"ngModelChange\", \"keyup\"], [\"role\", \"button\", 1, \"cancel-search\", \"position-absolute\"], [1, \"bi\", \"bi-x-lg\", 3, \"click\"], [\"type\", \"button\", \"data-bs-toggle\", \"dropdown\", \"aria-expanded\", \"false\", 1, \"btn\", \"btn-outline-secondary\", \"dropdown-toggle\"], [1, \"dropdown-menu\", \"dropdown-menu-end\"], [\"class\", \"dropdown-item\", \"href\", \"#\", 3, \"hidden\", \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [3, \"todoCategories\", \"openModal\", \"onCompleteAction\", \"isCategorySelected\"], [\"href\", \"#\", 1, \"dropdown-item\", 3, \"hidden\", \"click\"], [3, \"todoItem\", \"todoCategories\", \"editTodoItem\", \"deleteTodoItem\"]],\n      template: function TodoListComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtext(3, \" Label, Description, Category name and status: \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"div\", 4)(7, \"input\", 5);\n          i0.ɵɵlistener(\"ngModelChange\", function TodoListComponent_Template_input_ngModelChange_7_listener($event) {\n            return ctx.filterValue = $event;\n          })(\"keyup\", function TodoListComponent_Template_input_keyup_7_listener($event) {\n            return ctx.filterTodo($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 6)(9, \"i\", 7);\n          i0.ɵɵlistener(\"click\", function TodoListComponent_Template_i_click_9_listener() {\n            return ctx.resetFilter();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(10, \"button\", 8);\n          i0.ɵɵtext(11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"ul\", 9)(13, \"li\");\n          i0.ɵɵtemplate(14, TodoListComponent_a_14_Template, 2, 2, \"a\", 10);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵtemplate(15, TodoListComponent_ng_container_15_Template, 2, 2, \"ng-container\", 11);\n          i0.ɵɵelementStart(16, \"div\", 0)(17, \"div\", 1);\n          i0.ɵɵelement(18, \"div\", 2);\n          i0.ɵɵelementStart(19, \"div\", 2)(20, \"button\", 12);\n          i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_20_listener() {\n            return ctx.openAddModal();\n          });\n          i0.ɵɵtext(21, \"Add Todo\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(22, \"app-add-edit-todo\", 13);\n          i0.ɵɵlistener(\"onCompleteAction\", function TodoListComponent_Template_app_add_edit_todo_onCompleteAction_22_listener($event) {\n            return ctx.addTodoItem($event);\n          })(\"isCategorySelected\", function TodoListComponent_Template_app_add_edit_todo_isCategorySelected_22_listener($event) {\n            return ctx.isCategorySelected($event);\n          });\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngModel\", ctx.filterValue);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.selectedFilterType);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filterTypes);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngForOf\", ctx.todos);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"todoCategories\", ctx.todoCategories)(\"openModal\", ctx.openAddEditModal);\n        }\n      },\n      dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.TodoItemComponent, i5.AddEditTodoComponent],\n      styles: [\"[_nghost-%COMP%]{--todo-list-compnent-font-weight: 700;--todo-list-compnent-color: $primary;--todo-list-compnent-cancel-search-top: 9px;--todo-list-compnent-cancel-search-right: 10px}[_nghost-%COMP%]   .header[_ngcontent-%COMP%]{font-weight:var(--todo-list-compnent-font-weight);color:var(--todo-list-compnent-color)}[_nghost-%COMP%]   .container[_ngcontent-%COMP%]   .position-relative[_ngcontent-%COMP%]   .cancel-search[_ngcontent-%COMP%]{top:var(--todo-list-compnent-cancel-search-top);right:var(--todo-list-compnent-cancel-search-right)}\"]\n    });\n  }\n  return TodoListComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}