{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = [\"editTodo\"];\nfunction AddEditTodoComponent_ng_template_0_option_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"value\", category_r5)(\"selected\", ctx_r4.isCategorySelected.next(category_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", category_r5, \" \");\n  }\n}\nfunction AddEditTodoComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"h4\", 2);\n    i0.ɵɵtext(2, \"Edit Todo item\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(3, \"div\", 3)(4, \"form\", 4)(5, \"div\", 5)(6, \"label\", 6);\n    i0.ɵɵtext(7, \"Name/Label:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"input\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\", 5)(10, \"label\", 8);\n    i0.ɵɵtext(11, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"textarea\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"div\", 5)(14, \"label\", 10);\n    i0.ɵɵtext(15, \"Category\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"select\", 11)(17, \"option\", 12);\n    i0.ɵɵtext(18, \"Choose category\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(19, AddEditTodoComponent_ng_template_0_option_19_Template, 2, 3, \"option\", 13);\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(20, \"div\", 14)(21, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AddEditTodoComponent_ng_template_0_Template_button_click_21_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const c_r2 = restoredCtx.close;\n      return i0.ɵɵresetView(c_r2(\"Save click\"));\n    });\n    i0.ɵɵtext(22, \"Save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(23, \"button\", 16);\n    i0.ɵɵlistener(\"click\", function AddEditTodoComponent_ng_template_0_Template_button_click_23_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const d_r3 = restoredCtx.dismiss;\n      return i0.ɵɵresetView(d_r3(\"Cancel edit click\"));\n    });\n    i0.ɵɵtext(24, \"Cancel\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"formGroup\", ctx_r1.addEditForm);\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.todoCategories);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r1.addEditForm.pristine || ctx_r1.addEditForm.invalid);\n  }\n}\nexport let AddEditTodoComponent = /*#__PURE__*/(() => {\n  class AddEditTodoComponent {\n    constructor(_modalService, fb) {\n      this._modalService = _modalService;\n      this.openModal = new Subject();\n      this.onCompleteAction = new EventEmitter();\n      this.isCategorySelected = new EventEmitter();\n      this.subscriptions = new Subscription();\n      this.addEditForm = fb.group({\n        label: ['', Validators.required],\n        description: ['', Validators.required],\n        category: ['', Validators.required]\n      });\n    }\n    ngOnInit() {\n      this.subscriptions.add(this.openModal // on modal open call\n      .subscribe(v => {\n        // opening the Add/Edit modal\n        this._modalService.open(this.editTodo, {\n          ariaLabelledBy: 'modal-basic-title'\n        }).result.then(result => {\n          this.onCompleteAction.next(this.addEditForm.value);\n        });\n      }));\n    }\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe(); // removing the add/edit modal on component unload\n    }\n    static #_ = this.ɵfac = function AddEditTodoComponent_Factory(t) {\n      return new (t || AddEditTodoComponent)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.UntypedFormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AddEditTodoComponent,\n      selectors: [[\"app-add-edit-todo\"]],\n      viewQuery: function AddEditTodoComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editTodo = _t.first);\n        }\n      },\n      inputs: {\n        todoCategories: \"todoCategories\",\n        openModal: \"openModal\"\n      },\n      outputs: {\n        onCompleteAction: \"onCompleteAction\",\n        isCategorySelected: \"isCategorySelected\"\n      },\n      decls: 2,\n      vars: 0,\n      consts: [[\"editTodo\", \"\"], [1, \"modal-header\"], [\"id\", \"modal-basic-title\", 1, \"modal-title\"], [1, \"modal-body\"], [\"novalidate\", \"\", 3, \"formGroup\"], [1, \"mb-3\"], [\"for\", \"nameLabel\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"nameLabel\", \"placeholder\", \"My task\", \"formControlName\", \"label\", 1, \"form-control\"], [\"for\", \"todoDescription\", 1, \"form-label\"], [\"id\", \"todoDescription\", \"rows\", \"3\", \"formControlName\", \"description\", 1, \"form-control\"], [\"for\", \"todoCategory\", 1, \"form-label\"], [\"id\", \"todoCategory\", \"aria-label\", \"Todo Category\", \"formControlName\", \"category\", 1, \"form-select\"], [\"disabled\", \"\", \"selected\", \"\"], [3, \"value\", \"selected\", 4, \"ngFor\", \"ngForOf\"], [1, \"modal-footer\"], [\"type\", \"submit\", 1, \"btn\", \"btn-dark\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-dark\", 3, \"click\"], [3, \"value\", \"selected\"]],\n      template: function AddEditTodoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, AddEditTodoComponent_ng_template_0_Template, 25, 3, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n        }\n      },\n      dependencies: [i3.NgForOf, i2.ɵNgNoValidate, i2.NgSelectOption, i2.ɵNgSelectMultipleOption, i2.DefaultValueAccessor, i2.SelectControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName]\n    });\n  }\n  return AddEditTodoComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}